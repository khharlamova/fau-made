pipeline GoodsPipeline{
    GoodsExtractor -> GoodsTextFileInterpreter -> GoodsTextRangeSelector -> GoodsCSVInterpreter -> GoodsCellWriter_AtoE -> GoodsCellWriter_ATtoAU -> GoodsTableInterpreter -> GoodsLoader;

    block GoodsExtractor oftype HttpExtractor {
        url:"https://www-genesis.destatis.de/genesis/downloads/00/tables/46131-0014_00.csv";
    }
    
    // ensure German umlauts are saved correctly
    block GoodsTextFileInterpreter oftype TextFileInterpreter {
        encoding:"latin2";
    }

    // remove metadata rows, data starts in row 9
    block GoodsTextRangeSelector oftype TextRangeSelector {
        lineFrom:9;
    }

    // select only a subset of columns, add header names for the first columns A-E
    block GoodsCellWriter_AtoE oftype CellWriter {
        at: range A1:E1;
         write: ['year', 'month', 'goods_id', 'goods_name', 'goods_source'];
    }

    // select only a subset of columns, rename headers for the quantity columns AT-AU
    block GoodsCellWriter_ATtoAU oftype CellWriter {
        at: range AT1:AU1;
         write: ['abroad', 'total'];
    }
    
    // interpret the sheet as a table by adding structure
    block GoodsTableInterpreter oftype TableInterpreter {
        header: true;
        columns:[
            'year' oftype Numeric,
            'month' oftype GermanMonth,
            'goods_name' oftype text,
            'goods_source' oftype text,
            'goods_id' oftype GoodsId,
            'abroad' oftype Numeric,
            'total' oftype Numeric
        ];
    }

    // load the table into a sink, here into a sqlite file
    block GoodsLoader oftype SQLiteLoader {
        table: "goods";
        file: "goodsTransportedByTrain.sqlite";
    }
}

// numeric values must be positive integers
valuetype Numeric oftype integer {
    constraints:[NumericConstrant];
}

constraint NumericConstrant on decimal:
    value >= 0;

// 'month' must be a German month, capitalized
valuetype GermanMonth oftype text {
    constraints:[MonthConstraint];
}

constraint MonthConstraint oftype AllowlistConstraint {
    allowlist:['Januar','Februar','MÃ¤rz','April','Mai','Juni','Juli','August','September','Oktober','November','Dezember'];
}

// 'goods_id' must start with NST7-, followed by three numbers or capital letters
valuetype GoodsId oftype text {
    constraints:[GoodsIdConstraint];
}

constraint GoodsIdConstraint oftype RegexConstraint {
    regex: /^NST7-([A-Z0-9]{3})$/;
}
