pipeline BatterietemperaturPipeline {
    BatterietemperaturDownloader -> BatterietemperaturUnzipper -> BatterietemperaturFilePicker -> BatterietemperaturFileInterpreter -> BatterietemperaturCSVInterpreter -> RenameTemperaturCellWriter -> RenameTemperaturBatteryCellWriter -> BatterietemperaturTableInterpreter -> BatterietemperaturTempConverter1 -> BatterietemperaturTempConverter2 -> BatterietemperaturLoader;

    // extract data from the url
    block BatterietemperaturDownloader oftype HttpExtractor {
        url: "https://www.mowesta.com/data/measure/mowesta-dataset-20221107.zip";
    }

    // unzip the downloaded file
    block BatterietemperaturUnzipper oftype ArchiveInterpreter {
        archiveType: "zip";
    }

    // select the data file from the unzipped contents
    block BatterietemperaturFilePicker oftype FilePicker {
        path: "/data.csv";
    }

    // interpret the file as a text file
    block BatterietemperaturFileInterpreter oftype TextFileInterpreter {
        encoding: "utf8";  // correct encoding value
    }

    // interpret the file as a csv
    block BatterietemperaturCSVInterpreter oftype CSVInterpreter {
        delimiter: ";";
    }

    // rename the temperature column
    block RenameTemperaturCellWriter oftype CellWriter {
        at: cell E1;
        write: ["temperature"];
    }

    // rename the battery temperature column
    block RenameTemperaturBatteryCellWriter oftype CellWriter {
        at: cell J1;
        write: ["battery_temperature"];
    }

    // interpret the sheet as a table by adding structure
    block BatterietemperaturTableInterpreter oftype TableInterpreter {
        header: true;
        columns: [
            "id" oftype ValidGeraetNumber,
            "producer" oftype Text,
            "model" oftype Text,
            "month" oftype Text,
            "temperature" oftype Decimal,
            "battery_temperature" oftype Decimal,
            "device_active" oftype Text
        ];
    }

    // convert temperatures from celsius to fahrenheit
    block BatterietemperaturTempConverter1 oftype TableTransformer {
        inputColumns: ['temperature'];
        outputColumn: 'temperature';
        use: CelsiusToFahrenheit;
    }

    block BatterietemperaturTempConverter2 oftype TableTransformer {
        inputColumns: ['battery_temperature'];
        outputColumn: 'battery_temperature';
        use: CelsiusToFahrenheit;
    }

    // load the table into a sink, here into an sqlite file
    block BatterietemperaturLoader oftype SQLiteLoader {
        table: "temperatures";
        file: "./temperatures.sqlite";
    }

    // numeric values for 'id' must be positive integers
    valuetype ValidGeraetNumber oftype integer {
        constraints: [PositiveIntegerConstraint];
    }

    constraint PositiveIntegerConstraint on integer {
        value: "> 0";
    }

    // transform celsius to fahrenheit
    transform CelsiusToFahrenheit {
        from Celsius oftype decimal;
        to Fahrenheit oftype decimal;
        Fahrenheit: (Celsius * 9/5) + 32;
    }
}
