pipeline BatterietemperaturPipeline {
    BatterietemperaturDownload -> BatterietemperaturFilePicker -> BatterietemperaturTextFileInterpreter -> BatterietemperaturCSVInterpreter -> BatterietemperaturRenameHeader -> BatterietemperaturTableInterpreter -> CelsiusToFahrenheitTemperatureTransformation -> CelsiusToFahrenheitBatteryTemperatureTransformation -> BatterietemperaturLoader;

    block BatterietemperaturDownload oftype GTFSExtractor {
        url: "https://www.mowesta.com/data/measure/mowesta-dataset-20221107.zip";
    }

    block BatterietemperaturFilePicker oftype FilePicker {
        path: "/data.csv";
    }

    // ensure correct encoding
    block BatterietemperaturTextFileInterpreter oftype TextFileInterpreter {
    encoding: "utf8";
    }
    
    block BatterietemperaturCSVInterpreter oftype CSVInterpreter {
        delimiter: ";";
    }

    // select and rename only needed columns
    block BatterietemperaturRenameHeader oftype CellWriter {
    at: range A1:J1;
    write: ["id", "producer","model", "month", "temperature", "","", "","", "battery_temperature"];
    }

    // interpret the sheet as a table by adding structure
    block BatterietemperaturTableInterpreter oftype TableInterpreter {
        header: true;
        columns: [
            "id" oftype PositiveID,
            "producer" oftype text,
            "model" oftype text,
            "month" oftype integer,
            "temperature" oftype decimal,
            "battery_temperature" oftype decimal,
        ];
    }

    // transform, see below
    block CelsiusToFahrenheitTemperatureTransformation oftype TableTransformer {
    inputColumns: ['temperature'];
    outputColumn: 'temperature';
    use: CelsiusToFahrenheit;
    }

    block CelsiusToFahrenheitBatteryTemperatureTransformation oftype TableTransformer {
    inputColumns: ['battery_temperature'];
    outputColumn: 'battery_temperature';
    use: CelsiusToFahrenheit;
    }

    // load the table into a sink, here into a sqlite file
    block BatterietemperaturLoader oftype SQLiteLoader {
        table: "temperatures";
        file: "./temperatures.sqlite";
    }
}

// numeric values must be positive integers
valuetype PositiveID oftype integer {
    constraints: [PositiveIDConstraint,];
}

constraint PositiveIDConstraint on integer:
value >= 1;

// transform as per task description
transform CelsiusToFahrenheit {
   from Celsius oftype decimal;
   to Fahrenheit oftype decimal;
   Fahrenheit: (Celsius * 9/5) + 32;
 }
