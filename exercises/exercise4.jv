pipeline BatterietemperaturPipeline {
    BatterietemperaturDownloader -> BatterietemperaturFilePicker -> BatterietemperaturFileInterpreter -> BatterietemperaturCSVInterpreter -> BatterietemperaturWriter -> BatterietemperaturSelector -> BatterietemperaturTableInterpreter -> BatterietemperaturTempConverter1 -> BatterietemperaturTempConverter2 -> BatterietemperaturLoader;

    // extracting data from the URL
    block BatterietemperaturDownloader oftype GTFSExtractor {
        url: "https://www.mowesta.com/data/measure/mowesta-dataset-20221107.zip";
    }

    // select the data file from the unzipped contents
    block BatterietemperaturFilePicker oftype FilePicker {
        path: "/data.csv";
    }

    // interpret the file as a text file
    block BatterietemperaturFileInterpreter oftype TextFileInterpreter {
        encoding: "utf8"; 
    }

    // interpret the file as a CSV
    block BatterietemperaturCSVInterpreter oftype CSVInterpreter {
        delimiter: ";";
    }

    block BatterietemperaturWriter oftype CellWriter {
        at: range A1:F1;
         write: ["id", "producer", "model", "month", "temperature", "battery_temperature"];
    }

    block BatterietemperaturSelectore oftype CellRangeSelector {
        select: range A1:K*;
    }

    // interpret the sheet as a table by adding structure
    block BatterietemperaturTableInterpreter oftype TableInterpreter {
        header: true;
        columns: [
            "id" oftype PositiveInteger,
            "producer" oftype text,
            "model" oftype text,
            "month" oftype text,
            "temperature" oftype decimal,
            "battery_temperature" oftype decimal,
        ];
    }

    // convert temperatures from Celsius to Fahrenheit
    block BatterietemperaturTempConverter1 oftype TableTransformer {
        inputColumns: ['temperature'];
        outputColumn: 'temperature';
        use: CelsiusToFahrenheit;
    }

    block BatterietemperaturTempConverter2 oftype TableTransformer {
        inputColumns: ['battery_temperature'];
        outputColumn: 'battery_temperature';
        use: CelsiusToFahrenheit;
    }

    // load the table into a sink, here into an SQLite file
    block BatterietemperaturLoader oftype SQLiteLoader {
        table: "temperatures";
        file: "temperatures.sqlite";
    }
}

    // numeric values for 'id' must be positive integers
    valuetype PositiveInteger oftype integer {
        constraints: [PositiveIntegerConstraint];
    }

    constraint PositiveIntegerConstraint {
        value > 0;
    }

    // transform Celsius to Fahrenheit
    transform CelsiusToFahrenheit {
        from Celsius oftype decimal;
        to Fahrenheit oftype decimal;
        Fahrenheit: (Celsius * 9/5) + 32;
    }
