pipeline BatterietemperaturPipeline {
    BatterietemperaturDownloader -> BatterietemperaturUnzipper -> BatterietemperaturCSVInterpreter -> BatterietemperaturColumnSelector -> BatterietemperaturColumnRenamer -> BatterietemperaturConverter -> BatterietemperaturTableInterpreter -> BatterietemperaturLoader;

    block BatterietemperaturDownloader oftype HttpExtractor {
        url: "https://www.mowesta.com/data/measure/mowesta-dataset-20221107.zip";
    }

    block BatterietemperaturUnzipper oftype ZipExtractor {
        file: "./mowesta-dataset-20221107.zip";
        outputDirectory: "./unzipped";
    }

    block BatterietemperaturCSVInterpreter oftype CSVInterpreter {
        file: "./unzipped/data.csv";
        delimiter: ",";
        enclosing: '';
    }

    block BatterietemperaturColumnSelector oftype ColumnSelector {
        columns: ["Geraet", "Hersteller", "Model", "Monat", "Temperatur in 째C (DWD)", "Batterietemperatur in 째C"];
    }

    block BatterietemperaturColumnRenamer oftype ColumnRenamer {
        mappings: {
            "Geraet": "id",
            "Hersteller": "producer",
            "Model": "model",
            "Monat": "month",
            "Temperatur in 째C (DWD)": "temperature",
            "Batterietemperatur in 째C": "battery_temperature"
        };
    }

    block BatterietemperaturConverter oftype ColumnTransformer {
        transformations: [
            {
                column: "temperature",
                formula: "(temperature * 9/5) + 32"
            },
            {
                column: "battery_temperature",
                formula: "(battery_temperature * 9/5) + 32"
            }
        ];
    }

    block BatterietemperaturTableInterpreter oftype TableInterpreter {
        header: true;
        columns: [
            "id" oftype BigInt,
            "producer" oftype Text,
            "model" oftype Text,
            "month" oftype Text,
            "temperature" oftype Float,
            "battery_temperature" oftype Float
        ];
    }

    block BatterietemperaturLoader oftype SQLiteLoader {
        table: "temperatures";
        databaseFile: "./temperatures.sqlite";
    }
}

// numeric values for 'id' must be positive integers
valuetype BigInt oftype integer {
    constraints: [PositiveIntegerConstraint];
}

constraint PositiveIntegerConstraint on integer {
    value > 0;
}


